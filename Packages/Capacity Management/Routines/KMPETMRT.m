KMPETMRT ;SP/JML - Collect Cache Metrics for the Real-Time Error Trap Monitor ;5/1/2021
 ;;4.0;CAPACITY MANAGEMENT;**1,2**;3/1/2018;Build 3
 ;
 ; Integration Agreements
 ;  Reference to $$WORKDAY^XUWORKDY supported by ICR #10046
 ;  Reference to GETENV^%ZOSV supported by ICR #10097
 ;  Reference to $$HTFM^XLFDT supported by ICR #10103
 ;
RUN ;
 N $ES,$ETRAP S $ETRAP="D ERR^ZU Q"
 I $$GETVAL^KMPVCCFG("VETM","ONOFF",8969,"I") D RU^%ZOSVKR("KMP VETM DRIVER")
 N KMPCHKH,KMPFMDAY,KMPH,KMPHANG,KMPINST,KMPNDTYP,KMPPARMS,KMPSINF,KMPSINT,KMPSTOP,KMPVNODE,KMPVTEST,KMPWORK,U,Y
 N ZTDESC,ZTDTH,ZTRTN,ZTSAVE
 ;
 ; ALWAYS - verify data is not building past configured number of days - if so for any reason, delete it
 D PURGEDLY^KMPVCBG("VETM")
 ; Quit if monitor is not turned on
 I $$GETVAL^KMPVCCFG("VETM","ONOFF",8969)'="ON" D  Q
 .I $$GETVAL^KMPVCCFG("VETM","ONOFF",8969,"I") D RU^%ZOSVKR("KMP VETM DRIVER END")
 ; Environment Check
 ;   if TEST system - quit if system is a front end OR allow test=no
 ;   if PROD system - quit if system is a front end AND allow test=no
 S KMPVTEST=$$GETVAL^KMPVCCFG("VETM","ALLOW TEST SYSTEM",8969,"I")
 D GETENV^%ZOSV S KMPVNODE=$P(Y,U,3)_":"_$P($P(Y,U,4),":",2)
 I $$PROD^KMPVCCFG'="prod" I ($$ISBENODE^KMPVCCFG(KMPVNODE)=0)!(KMPVTEST=0) Q
 I $$PROD^KMPVCCFG="prod" I ($$ISBENODE^KMPVCCFG(KMPVNODE)=0)&(KMPVTEST=0) Q
 ;
 S U="^"
 S KMPFMDAY=+$$HTFM^XLFDT($H,1)
 S KMPWORK=$$WORKDAY^XUWORKDY(KMPFMDAY)
 S KMPSINF=$$SITEINFO^KMPVCCFG() ; site name^fac num^mail domain^prod/test^site code
 ; Main loop - tasks off collection to keep interval intact
 S ^KMPTMP("KMPV","VETM","TEMP")=0
 S KMPSTOP=0,KMPCHKH=+$H
 S KMPINST=$P(KMPVNODE,":",2),KMPNDTYP=$$NODETYPE^KMPUTLW(KMPINST)
 S KMPPARMS("KMPFMDAY")=KMPFMDAY,KMPPARMS("KMPCHKH")=KMPCHKH
 S KMPPARMS("KMPWORK")=KMPWORK,KMPPARMS("KMPSINF")=KMPSINF
 S KMPPARMS("KMPINST")=KMPINST,KMPPARMS("KMPNDTYP")=KMPNDTYP
 F  D  Q:KMPSTOP
 .I $$GETVAL^KMPVCCFG("VETM","ONOFF",8969)'="ON" S KMPSTOP=1 Q  ; RUN FLAG SET TO 0
 .S KMPH=$H
 .I KMPH>KMPCHKH SET KMPSTOP=1 Q
 .S KMPSINT=$$GETVAL^KMPVCCFG("VETM","COLLECTION INTERVAL",8969)
 .S KMPHANG=KMPSINT*60
 .S KMPPARMS("KMPH")=KMPH,KMPPARMS("KMPSINT")=KMPSINT
 .M ^KMPTMP("KMPV","VETM",KMPVNODE,"PARMS")=KMPPARMS
 .J COLLECT(KMPVNODE)
 .H KMPHANG
 I $$GETVAL^KMPVCCFG("VETM","ONOFF",8969,"I") D RU^%ZOSVKR("KMP VETM DRIVER END")
 Q
 ;
COLLECT(KMPVNODE) ;
 N $ES,$ETRAP S $ETRAP="D ERR^ZU Q"
 I $$GETVAL^KMPVCCFG("VETM","ONOFF",8969,"I") D RU^%ZOSVKR("KMP VETM COLLECTOR")
 N B,KMPAJN,KMPDB,KMPCIO,KMPCNT,KMPDAT,KMPDBI,KMPDST,KMPEARR,KMPEDATA,KMPEDATE,KMPELINE,KMPENUM,KMPERR,KMPERRN
 N KMPETSO,KMPH,KMPINODE,KMPINST,KMPJMSG,KMPJNODE,KMPJNUM,KMPJSON,KMPLGR,KMPNDTYP,KMPNT,KMPPNAM,KMPSLOT,KMPSTAT,KMPTIMES
 N KMPTS,KMPUNAM,KMPUTCE,KMPUTCO,KMPZA,KMPZB,KMPZIO
 ;
 M KMPPARMS=^KMPTMP("KMPV","VETM",KMPVNODE,"PARMS")
 S KMPFMDAY=KMPPARMS("KMPFMDAY")
 S KMPWORK=KMPPARMS("KMPWORK"),KMPSINF=KMPPARMS("KMPSINF")
 S KMPCHKH=KMPPARMS("KMPCHKH"),U="^"
 S KMPH=KMPPARMS("KMPH"),KMPSINT=KMPPARMS("KMPSINT")
 S KMPINST=KMPPARMS("KMPINST"),KMPNDTYP=KMPPARMS("KMPNDTYP")
 ;
 S KMPJSON=##class(%DynamicObject).%New()
 S KMPJMSG=##class(%DynamicObject).%New()
 S KMPEARR=##class(%DynamicArray).%New()
 ;
 S KMPJSON.Function="VETM"
 S KMPSLOT=$$SLOT^KMPVCCFG(KMPH,KMPSINT,"HOROLOG")
 S $P(KMPH,",",2)=KMPSLOT
 S KMPTIMES=$$TSTAMP^KMPUTLW(KMPH,"HOROLOG",1) ; yyy-mm-dd hh:mm:ssZts
 S KMPETSO=$P(KMPTIMES,"^")
 S KMPUTCO=$P(KMPTIMES,"^",2)
 S KMPUTCE=$P(KMPTIMES,"^",3)
 S KMPDST=$P(KMPTIMES,"^",4)
 ;
 D SITE^KMPUTLW(KMPJSON)
 S KMPJMSG.Timestamp=KMPETSO,KMPJMSG.UtcOdbc=KMPUTCO
 S KMPJMSG.UtcEpoch=KMPUTCE,KMPJMSG.IsDst=KMPDST
 S KMPJMSG.Node=$P(KMPVNODE,":"),KMPJMSG.NodeType=KMPNDTYP
 S KMPJMSG.Instance=KMPINST,KMPJMSG.Workday=KMPWORK
 S KMPJMSG.NodeType=KMPNDTYP
 S KMPJMSG.Date=$$SHORTDAT^KMPUTLW(+$H,"HOROLOG")
 S KMPJSON.MessageData=KMPJMSG
 ;
 ; Get metrics
 S KMPDAT=+KMPH,KMPCNT=0
 S KMPENUM=+$G(^KMPTMP("KMPV","VETM","TEMP"))
 F  S KMPENUM=$O(^%ZTER(1,KMPDAT,1,KMPENUM)) Q:+KMPENUM=0  D
 .S KMPCNT=KMPCNT+1
 .S KMPELINE="",B="|"
 .S KMPJNODE=$G(^%ZTER(1,KMPDAT,1,KMPENUM,"J"))
 .S KMPINODE=$G(^%ZTER(1,KMPDAT,1,KMPENUM,"I"))
 .S KMPEDATE=$G(^%ZTER(1,KMPDAT,1,KMPENUM,"H"))
 .S KMPTS=$P($$TSTAMP^KMPUTLW(KMPEDATE,"HOROLOG",1),"^")
 .S KMPDBI=$P(KMPJNODE,"^",4),KMPDB=$P(KMPDBI,":",1)
 .S KMPINST=$P(KMPDBI,":",2),KMPNT=$$NODETYPE^KMPUTLW(KMPINST)
 .S KMPERRN=+$G(^%ZTER(1,KMPDAT,1,KMPENUM,0)),KMPERR=$G(^%ZTER(1,KMPDAT,1,KMPENUM,"ZE"))
 .S KMPLGR=$G(^%ZTER(1,KMPDAT,1,KMPENUM,"GR"))
 .S KMPLGR=$TR(KMPLGR,"|","b")
 .S KMPCIO=$TR($P(KMPINODE,"^",1),"|","~"),KMPZA=$P(KMPINODE,"^",2)
 .S KMPZB=$P(KMPINODE,"^",3),KMPZIO=$TR($P(KMPINODE,"^",4),"|","~")
 .S KMPJNUM=$P(KMPJNODE,"^",1),KMPPNAM=$P(KMPJNODE,"^",2)
 .S KMPUNAM=$P(KMPJNODE,"^",3),KMPAJN=$P(KMPJNODE,"^",5)
 .S KMPELINE=$G(^%ZTER(1,KMPDAT,1,KMPENUM,"LINE"))
 .S KMPEDATA=KMPERRN_B_KMPTS_B_KMPTS_B_KMPDB_B_KMPINST_B_KMPNT_B_KMPERR_B_KMPLGR_B_KMPCIO_B
 .S KMPEDATA=KMPEDATA_KMPZA_B_KMPZB_B_KMPZIO_B_KMPJNUM_B_KMPPNAM_B_KMPUNAM_B_KMPAJN_B_KMPELINE
 .D KMPEARR.%Push(KMPEDATA)
 .S ^KMPTMP("KMPV","VETM","TEMP")=KMPENUM
 S KMPJSON.Details=KMPEARR
 I KMPCNT=0 D  Q
 .I $$GETVAL^KMPVCCFG("VETM","ONOFF",8969,"I") D RU^%ZOSVKR("KMP VETM COLLECTOR END")
 ;
 S KMPSTAT=$$POST^KMPUTLW(KMPJSON,"/errortrap",,"VETM")
 I +KMPSTAT'=200 S ^KMPTMP("KMPV","VETM","RETRY",KMPVNODE,+$H,$H)=KMPJSON.%ToJSON()
 I $$GETVAL^KMPVCCFG("VETM","ONOFF",8969,"I") D RU^%ZOSVKR("KMP VETM COLLECTOR END")
 Q
 ;
RETRY ;  retry failed POSTS
 N KMPDAY,KMPI,KMPJSON,KMPSTAT,KMPVNODE,Y
 ;
 D GETENV^%ZOSV S KMPVNODE=$P(Y,"^",3)_":"_$P($P(Y,"^",4),":",2)
 S KMPDAY=""
 F  S KMPDAY=$O(^KMPTMP("KMPV","VETM","RETRY",KMPVNODE,KMPDAY)) Q:KMPDAY=""  D
 .S KMPI=""
 .F  S KMPI=$O(^KMPTMP("KMPV","VETM","RETRY",KMPVNODE,KMPDAY,KMPI)) Q:KMPI=""  D
 ..S KMPJSON=$G(^KMPTMP("KMPV","VETM","RETRY",KMPVNODE,KMPDAY,KMPI))
 ..S KMPSTAT=$$POST^KMPUTLW({}.%FromJSON(KMPJSON),"/errortrap",,"VETM")
 ..I +KMPSTAT=200 K ^KMPTMP("KMPV","VETM","RETRY",KMPVNODE,KMPDAY,KMPI)
 Q
